// Redux
// react 라이브러리
//  -> 여러 컴포넌트가 공유하는 상태를 관리하기위한 라이브러리
//  -> 예측 가능, 일관된 방식으로 상태를 관리하는것이 특징.

// Redux의 핵심원칙
// 1. Single source of truth (단일 진실 공급원)
//  -> 개발하는 서비스(어플리케이션)의 모든 상태를
//     하나의 스토어에서 객체 트리 형태로 저장하고 관리하는 원칙 
//  -> 근데 굳이 트리구조로 저장할 필요가 있음?
//  특징 : 모든 state가 하나의 중앙화된 스토어에 저장
//    -> 데이터의 일관성과 정확성 유지가 쉬워짐
//    -> 유지보수가 상대적으로 쉬워지며 모든 구성원들이 동일한 데이터에 접근 가능.
//    -> 상태 예측이 투명해져서 디버깅과 테스트가 용이


// 2. State is read-only ( 상태는 읽기 전용)
//  -> 읽기 전용 : 수정불가.
//  -> 그렇다면 상태 자체를 수정할 방법은 없는가?
//     (상태를 직접수정하는것은 불가능 반드시 액션 객체를 통해서만 변경이 가능.)
//      -> 아무나 상태를 수정하게되면 잘못된 데이터가 들어올수 있거나 혹은
//         데이터가 탈취될수도 있음.
//  -> 이 특징을 통해 실행취소, 다시실행 기능을 쉽게 구현.

// 3. Changes are made with pure functions (순수 함수로의 변경)
// 순수 함수(Pure Functions) : 동일한 입력에 대해 항상 동일한 출력을 리턴.
//  -> 외부 상태를 변경하지 않고, 외부값을 참조하거나 의존하지도 않음.
//  -> 순수함수는 리듀서를 지칭하기도함.(정확히는 리듀서는 순수함수여야함.)
//   이유: 예측이 가능(동일한입력 -> 동일한 결과가 나와야해서.)
//         성능최적화(객체의 참조 비교만으로 변경을 감지할수 있어서 깊게 비교할필요는 x) 
//        -> 리듀서에서 상태값을 직접 수정해서는 안됨.


// Redux 기본 구성요소
// 1. 액션 : 상태변화를 일으키기위한 객체.
//    구조
//     -> type 필드를 필수적으로 포함해야함.
//    특징 
//      -> 스토어로 데이터를 보내는 데이터 묶음
//      -> 스토어의 유일한 정보원
//      -> 일반적인 JS의 Object와 생김새가 똑같음.

// 2. 액션 생성함수(Action Creator) : 액션 객체를 생성하는 함수.
// 기본적인 액션 생성 함수
//  -> 액션 객체 그대로 선언하면될거같은데
//     액션생성함수가 굳이 필요한가?
//     만약 액션생성함수가 필요하다면 썼을때의 장점은 무엇인가.

// 장점
//  1. 재사용성, 확장성(살짝 애매하기도...) 측면에서 유리
//  2. 유지보수성 측면에서도 좋음(실수 방지에 유리.)
//  3. 액션 생성 로직의 중앙화와 객체 생성의 자동화.


// const addTodo = (text) => ({
//     type: 'ADD_TODO',
//     payload: {
//       text,
//       id: Date.now()
//     }
//   });
  
//   // 여러 파라미터를 받는 액션 생성 함수
//   const updateUser = (id, name, email) => ({
//     type: 'UPDATE_USER',
//     payload: {
//       id,
//       name,
//       email
//     }
//   });

// 3. 리듀서(Reducer)
//  -> 상태와 액션을 받아 새로운 상태를 리턴하는 순수함수.
// 특징
//  -> 순수함수로 작성이 필요
//  -> 이전 상태를 직접 수정하지 않고 새로운 상태 객체를 리턴
//  -> 리듀서의 기본구조는 hooks/useReducer 파일들을 참조,
//  리덕스의 핵심 구성요소는 리듀서라봐도 과언이 아님.

// 4. 스토어
//  -> redux 어플리케이션의 전체 상태를 보관하는 객체.
// 특징 
//  -> 단일성(하나의 어플에는 하나의 스토어만 존재.)
//  -> 모든 상태는 하나의 객체 트리 구조로 저장

// 핵심기능
//  -> 어플리케이션의 상태 저장
//  -> getState()를 통한 상태 접근
//  -> dispatch(action를 통한 상태 수정)
//  -> subscribe를 통한 리스너 등록

// 생성방법
// createStore 함수를 사용하여 생성
// 첫번째 파라미터로 리듀서 함수를 받아야함
// 두번째 파라미터로 초기 상태값을 받아야함.

// 스토어는 필요한가?(스토어의 중요성)
// 상태 안정성 유지
// 데이터의 흐름을 보장
// 상태 변화의 예측 가능성 제공

// 5. 디스패치 - 스토어 내장 함수중 하나. 액션을 발생시키는 역할.
//  - 액션을 스토어에 전달하는 유일한 방법.
//  - 상태를 업데이트 하기위한 명령을 전달하는 행동.

// 실행순서
// 이벤트 발생 -> 액션을 redux 스토어에 dispatch -> 스토어가 reducer를 실행하여
//  새로운 상태를 생성 -> ui가 새로운 상태에 따라 리렌더링

// 6. 구독
// -> 스토어 내장함수중 하나. 상태 변화 감지 및 반응.

// 기본동작원리
// state가 업데이트 될때마다 등록된 리스너 함수가 호출.
// 구독 해제를 위한 unsubscribe 함수를 리턴.

//  -> 기능이 복잡해서 직접 쓰진 않고 라이브러리의 함수들을 활용하여 사용
//     useSelector와 같은 hook으로 구독관련 기능을 처리.

// redux도 사용을 위해서는 우선 설치가 필요.
// npm install redux react-redux @reduxjs/toolkit